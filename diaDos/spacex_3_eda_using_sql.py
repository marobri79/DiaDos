# -*- coding: utf-8 -*-
"""SpaceX - 3 -EDA Using SQL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_xYtK5sLa3TibUhJ3Hft5akEjy3yVFUF

# Etapa 3: Análisis de datos utilizando SQL

## Objetivos

En esta práctica subiremos los datos a una base de datos SQL y realizaremos diferentes queries para obtener información sobre los datos
"""

!pip install sqlalchemy==1.4.6 --quiet
import pandas as pd
import numpy as np
!pip install PyMySQL --quiet
import pymysql as pymsql
!pip install mysql-connector --quiet
import mysql.connector
from sqlalchemy import create_engine
!pip install sqlalchemy-utils --quiet
from sqlalchemy_utils import database_exists, create_database
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)

"""### Tarea 1: Subir los datos a la base de datos:

Primero cargamos el archivo de datos `dataset_part_2.csv`.
"""

df_path = "dataset_part_2.csv"
df = pd.read_csv(df_path)

#Rellena la siguiente variable con tu nombre y apellido (Todo junto y sin espacios). 
nombreBD = 'ManuelRomeroBriones'
linkConexion = 'mysql+mysqlconnector://alumno:385bd4cf713a8a36@13.39.109.107/' + nombreBD
#Establecemos la conexión
engine = create_engine(linkConexion)

if not database_exists(engine.url):
    create_database(engine.url)

# Añadir el dataframe a sql SPACEXTBL usando la función to_sql().
df.to_sql('SPACEXTBL',con = engine, if_exists="replace")

query = """select * from SPACEXTBL;"""
df  = pd.read_sql(query, con = engine )
df

"""## Tarea 2: Queries con SQL

### Ejercicio 1

##### Muestra las diferentes plataformas de lanzamiento:
"""

#Rellena la variable query con tu consulta
query = """select distinct LaunchSite from SPACEXTBL """
df  = pd.read_sql(query, con = engine )
df

"""### Ejercicio 2

##### Muestra 5 lanzamientos cuya plataforma empiece por 'CCS'

"""

query = """select LaunchSite from SPACEXTBL WHERE LaunchSite LIKE 'CCS%' LIMIT 5"""
df  = pd.read_sql(query, con = engine )
df

"""### Ejercicio 3

##### Mustra el la masa total transportada por los lanzamientos realizados donde el cliente es NASA (CRS)

"""

query = """select LaunchSite, sum(PayloadMass)from SPACEXTBL where Customers='NASA (CRS)' """
df  = pd.read_sql(query, con = engine )
df

"""### Ejercicio 4

##### Muestra la masa media tranportada por lanzamientos con serie que comienza por B1
"""

query = """select LaunchSite, avg(PayloadMass)from SPACEXTBL where LaunchSite like 'B1%'  """
df  = pd.read_sql(query, con = engine )
df

"""### Ejercicio 5

##### Muestra la fecha donde se realizo el primer aterrizaje exitoso sobre terreno (TRUE RTLS)

*Pista:Utiliza la función min*

"""

query = """select Date from SPACEXTBL where LandingOutcome like 'True%' limit 1"""
df  = pd.read_sql(query, con = engine )
df

"""### Ejercicio 6

##### Muestra las series de los cohetes que aterrizaron sobre portaviones (TRUE ASDS) con una masa entre 4000 y 6000
"""



"""### Ejercicio 7

##### Muestra el numero de lanzamientos que completaron su mision correctamente y aquellos que fallaron
"""



"""### Ejercicio 8

##### Muestra las series de los cohetes que transportaron la masa máxima
"""



"""### Ejercicio 9

##### Muestra los el resultados del aterrizaje, la serie del cohete y las plataforma de lanzamiento de aquellos lanzamientos fallidos o no intentados en el año 2015

"""



"""### Ejercicio 10

##### Muestra los resultados y la frecuencia de estos resultados entre 2010-06-04 y 2017-03-20 ordenados en orden descendiente según la frecuencia

"""

