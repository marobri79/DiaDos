# -*- coding: utf-8 -*-
"""Copia de SpaceX - 1 - Data Collection Api v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cyebQ4MTzds2DEH2oXdd4M_cnDb_v7Pw

## **Etapa 1: Obtencion de datos**

En esta práctica obtendrás los datos para predecir si un falcon 9 aterizará con éxito o no. Los datos serán recogidos mediante la API de SpaceX y nos aseguraremos de que siguen un formato adecuado para las fases siguientes. El siguiente es un ejemplo de un aterrizaje exitoso:

![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/lab_v2/images/landing\_1.gif)

Aquí puedes ver varios ejemplos de aterrizajes fallidos:

![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/lab_v2/images/crash.gif)

La gran mayoría de aterrizajes fallidos son intencionados para la realización de diversos controles. Estos aterrizajes se llevan a cabo la mayoria en el oceano, veremos estadísticas al respecto.

## Objetivos

En esta práctica realizaras una GET request a la API de SpaceX. Tambien realizarás cierto data wrangling básico y limpieza de datos.

***

## Importación de librerias.

Nos importamos las siguientes librerías necesarias para el desarrollo de la práctica.
"""

import requests
#Entrar en un link
import pandas as pd
import numpy as np
import datetime

pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
#Las opciones anteriores aseguran que pandas muestre el df completo en jupyternotebooks

"""Realicemos ahora una petición GET a la API de SpaceX. La URL es la siguiente.

"""

spacex_url="https://api.spacexdata.com/v4/launches/past"

"""* Usando la librería requests usa el método GET y pasale como argumento URL anterior, guardala en una variable `response`  y realiza el print de `response.content`"""

from requests.models import Response
#INSERTA AQUÍ TU CÓDIGO
#requests.TIPODEPETICIÓN(URL)
response=requests.get(spacex_url)
print(response.content)

"""Si la petición ha sido realizada correctamente el resultado del print debería ser similar al siguiente:


```
b'[{"fairings":{"reused":false,"recovery_attempt":false,"recovered":false, ...
```
(Recomendamos cerrar el resultado del print después de revisarlo para que google collab no sufra.)

Nuestra variable `response` contiene una grandísima cantidad de información sobre los SpaceX pero vamos a intentar formatearla para poder ver de que se trata exactamente y que nos interesa.

### Parte 1: Obtén los datos mediante peticiones GET y crea un dataframe

Hemos observado que la variable `response` tiene forma de diccionario (como la mayoría de respuestas a peticiones GET). Una forma efectiva de formatear dichos datos es transformarlos en un JSON y posteriormente en un dataframe de python:
"""

data=response.json()
data=pd.json_normalize(data)

"""*Utilizando el dataframe anterior muestra las 5 primeras filas*"""

#INSERTA AQUÍ TU CÓDIGO
data[:5]

"""Observemos que la mayoría de datos interesantes no se muestran de forma explícita sino que son IDs. Estos IDs nos permiten obtener mas información haciendo pediciones GET a diferentes endpoints de la API.
Para mas infrmación: https://docs.spacexdata.com/

Revisando la documentación de la API nos hemos dado cuenta de que no son necesarias todas las columnas, por lo que vamos a reducir nuestro dataframe a lo crucial:
"""

#Reescribe el dataframe para quedarnos solo con las columnas 'rocket', 'payloads','success', 'launchpad', 'cores', 'flight_number', 'date_utc'
#INSERTA AQUÍ TU CÓDIGO:
data=data[['rocket', 'payloads','success', 'launchpad', 'cores', 'flight_number', 'date_utc']]

# Algunos cohetes tienen mas de una carga 'payload' o 'core'. 
# Estos datos nos darán problemas en un futuro, entonces nos limitearemos a aquellos que solamente tienen un core o una carga (payload):
data = data[data['cores'].map(len)==1]
data = data[data['payloads'].map(len)==1]

# Otro problema que tenemos es que ahora tenemos listas de longitud 1. 
# Las listas de python no son especialmente compatibles con SQL por lo que lo solucionaremos sacando el valor de la lista:
data['cores'] = data['cores'].map(lambda x : x[0])
data['payloads'] = data['payloads'].map(lambda x : x[0])

# El formato de la fecha no es especialmete cómodo por lo que lo formatearemos:
data['date'] = pd.to_datetime(data['date_utc']).dt.date

"""Si revisamos `rocket, payload,launchpad y cores` son IDs, estos IDs nos permiten hacer peticiones a diferetes endpoints y obtener más información. La información para cada variable se encuentra en los siguientes links:

*   Para <code>rocket</code> https://github.com/r-spacex/SpaceX-API/blob/master/docs/rockets/v4/one.md . De aquí nos quedaremos la versión del cohete propulsor.

*   Para <code>payload</code> https://github.com/r-spacex/SpaceX-API/blob/master/docs/payloads/v4/one.md . De aquí guardaremos la carga, la masa de esta carga, la orbita a la que fue enviada y el cliente.

*   Para <code>launchpad</code> https://github.com/r-spacex/SpaceX-API/blob/master/docs/launchpads/v4/one.md . Guardamos la latitud, longitud y nombre de las diferentes plataformas de lanzamiento.

*   Para <code>cores</code> https://github.com/r-spacex/SpaceX-API/blob/master/docs/cores/v4/one.md . Gaurdamos diferentes variables del nucleo.

Los datos serán guardados en listas y estas listas las utilizaremos para crear una nuevo dataframe con todos los datos:


"""

#Para rocket
BoosterVersion = [] 
#Para paylaod
PayloadMass = []
Payload = []
Orbit = []
Customers= []

#Para launchpad
LaunchSite = []
Longitude = []
Latitude = []

#Para core
Outcome = []
Flights = []
GridFins = []
Reused = []
Legs = []
LandingPad = []
Block = []
Mission_Outcome = []
ReusedCount = []
Serial = []

"""Para completar las listas anteriores nos definiremos una lista de funciones para facilitar la obtención de los datos.

Empecemos con los cohetes:
"""

# DEFINICIÓN FUNCIÓN 1
def getBoosterVersion(data): #Definimos la función
    for x in data['rocket']: #Iteramos por cada fila de la columna rocket
       if x: #Comprobamos que no este vacía
        response = requests.get("https://api.spacexdata.com/v4/rockets/"+str(x)) #Realizamos la petición GET (Aplicamos str() para poder concatenar)
        response = response.json() #Transformamos la respuesta en un diccionario.
        BoosterVersion.append(response['name']) #Añadimos a BoosterVersion el valor con key 'name'

"""De <code>launchpad</code> nos gustaría quedarnos con la longitud, la latitud y el nombre de la plataforma

"""

# DEFINICIÓN FUNCIÓN 2
#INSERTA AQUI TU CÓDIGO
#Definimos la función getLaunchSite que recibe con argumento data
def getLaunchSite(data): 
    for x in data['launchpad']: #Iteramos por cada fila de la columna rocket
       if x: #Comprobamos que no este vacía
        response = requests.get("https://api.spacexdata.com/v4/launchpads/"+str(x)) #Realizamos la petición GET (Aplicamos str() para poder concatenar)
        response = response.json() #Transformamos la respuesta en un diccionario.
        Longitude.append(response['longitude']) #Añadimos a BoosterVersion el valor con key 'name'
        Latitude.append(response['latitude'])
        LaunchSite.append(response['name'])


#Iteramos por cada fila de la columna launchpad
#Comprobamos que no este vacía
#Realizamos la petición GET (Aplicamos str() para poder concatenar)
#Transformamos la respuesta en un dicciona'longitude'rio.
#Añadimos a Longitude el valor con key 'longitude'
#Añadimos a Latitude el valor con key 'latitude'
#Añadimos a LaunchSite el valor con key 'name'

"""De <code>payload</code> nos gustaría obtener la carga, el peso de la carga, el cliente y la órbita a la que fué enviada."""

# DEFINICIÓN FUNCIÓN 3
#INSERTA AQUI TU CÓDIGO
def getPayloadData(data): #Definimos la función
    for x in data['payloads']:#Iteramos por cada fila de la columna payloads
       if x: #Comprobamos que no este vacía
        response = requests.get("https://api.spacexdata.com/v4/payloads/"+str(x)) #Realizamos la petición GET (Aplicamos str() para poder concatenar)
        response = response.json() #Transformamos la respuesta en un diccionario.
        Payload.append(response['name']) #Añadimos a BoosterVersion el valor con key 'name'
        Customers.append(response['customers']) #Añadimos a Customers el valor con key 'customers'
        PayloadMass.append(response['mass_kg']) #Añadimos a PayloadMass el valor con key 'mass_kg'
        Orbit.append(response['orbit']) #Añadimos a Orbit el valor con key 'orbit'
        

#Definimos la función getPayloadData
#Iteramos por cada fila de la columna payloads
#Comprobamos que no este vacía
#Realizamos la petición GET (Aplicamos str() para poder concatenar)
#Transformamos la respuesta en un diccionario.
#Añadimos a Payload el valor con key 'name'
#Añadimos a Customers el valor con key 'customers'
#Añadimos a PayloadMass el valor con key 'mass_kg'
#Añadimos a Orbit el valor con key 'orbit'

"""La función para completar los datos de `core` tiene una complicación extra por lo que la damos hecha:"""

# DEFINICIÓN FUNCIÓN 4
def getCoreData(data):
    for core in data['cores']:
            if core['core'] != None:
                response = requests.get("https://api.spacexdata.com/v4/cores/"+core['core']).json()
                Block.append(response['block'])
                ReusedCount.append(response['reuse_count'])
                Serial.append(response['serial'])
            else:
                Block.append(None)
                ReusedCount.append(None)
                Serial.append(None)
            Outcome.append(str(core['landing_success'])+' '+str(core['landing_type']))
            Flights.append(core['flight'])
            GridFins.append(core['gridfins'])
            Reused.append(core['reused'])
            Legs.append(core['legs'])
            LandingPad.append(core['landpad'])

"""
Las funciones anteriores rellenan las listas vacías, veamoslo en práctica. *Revisa que la lista BoosterVersion esta vacía*
"""

#INSERTA AQUI TU CÓDIGO
print(BoosterVersion)

"""*Llama ahora la función `getBoosterVersion`.* (No devuelve nada así que no hace falta asignarle una variable. Solo instanciamos la funcion.)"""

# LLAMADA A FUNCIÓN 1
#INSERTA AQUI TU CÓDIGO
getBoosterVersion(data)

"""*Muestra los primeros 5 valores de la lista `BoosterVersion`*"""

#INSERTA AQUI TU CÓDIGO
BoosterVersion[:5]

"""*Aplica el resto de funciones:*
(No devuelven nada así que no hace falta asignarles una variable. Solo instanciamos a las funciones.)
"""

# LLAMADA A FUNCIÓN 2
#INSERTA AQUI TU CÓDIGO
getLaunchSite(data)

data

# LLAMADA A FUNCIÓN 3
#INSERTA AQUI TU CÓDIGO
getPayloadData(data)

# LLAMADA A FUNCIÓN 4
#INSERTA AQUI TU CÓDIGO
getCoreData(data)

"""Finalmente creamos un dataframe desde las listas anteriores. Primero convirtámolos en un diccionario:"""

launch_dict = {'FlightNumber': list(data['flight_number']),
'Date': list(data['date']),
'BoosterVersion':BoosterVersion,
'PayloadMass':PayloadMass,
'Payload':Payload,
'Orbit':Orbit,
'LaunchSite':LaunchSite,
'LandingOutcome':Outcome,
'Flights':Flights,
'GridFins':GridFins,
'Reused':Reused,
'Legs':Legs,
'LandingPad':LandingPad,
'Block':Block,
'Customers': Customers,
'Mission_Outcome':list(data['success']),
'ReusedCount':ReusedCount,
'Serial':Serial,
'Longitude': Longitude,
'Latitude': Latitude}

"""Y ahora crea un dataframe de Pandas desde el diccionario. Llámalo `launch_data`"""

#INSERTA AQUI TU CÓDIGO
import pandas as pd
launch_data=pd.DataFrame(launch_dict)

launch_data

"""Finalmente, muestra las primeras 5 filas del dataframe."""

#INSERTA AQUI TU CÓDIGO

print(launch_data[:5])

"""### Parte 2: Filtra el dataframe para que solo incluya los lanzamientos de falcon 9

El falcon 9 es una versión considerablemente más nueva y efectiva que el faclon 1. Dado que nos interesan los datos recientes y a futuro vamos a *eliminar los lanzamientos de `Falcon 1` del fataframe launch_data y llama al nuevo dataframe `data_falcon9`. Muestra las primeras 5 filas.*
"""

# INSERTA AQUÍ TU CÓDIGO
condicion=launch_data["BoosterVersion"]=="Falcon 9"
data_falcon9=launch_data[condicion]

"""Ahora que hemos eliminado los lanzamientos de Falcon 1 la columna FlightNumber está desajustada. Vamos a volver a ordenarla:"""

data_falcon9.FlightNumber = list(range(1, data_falcon9.shape[0]+1))
data_falcon9.head()

"""### Parte 3: Ajustes finales

Debajo podemos observar que nos faltan ciertos valores.
"""

media=data_falcon9['PayloadMass'].mean()
valores_nuevos=data_falcon9['PayloadMass'].replace(np.nan, media)
data_falcon9['PayloadMass']= valores_nuevos
data_falcon9.isnull().sum()

"""* Lo óptimo sería no tener celdas vacías por lo que vamos a ver que podemos hacer para solucionar esta situación.
La columna <code>LandingPad</code> tiene valores `None`en los casos donde el cohete no tuvo intención de aterrizar por lo que no tenía ningún LandingPad asignado. 

* Por otro lado, los valores innexistentes de `PayloadMass` si se pueden completar. *En este caso utilizaras la función `.mean()` para calcular la media y `.replace()` para reemplzar los valores `np.nan`.* 

"""

from IPython.lib.display import join
# INSERTA AQUI TU CÓDIGO
data_falcon9["Customers"]=data_falcon9["Customers"].map(lambda x:','.join(x))

data_falcon9.isnull().sum()

"""El número de celdas vacías en la columna <code>PayLoadMass</code> debería cambiar a 0.

Por último tenemos que la columna `Customers` es una lista, y como hemos comentado previamente, no se llevan especialmente bien con SQL. 
*Transforma esta lista en una string aplicando `.map(lambda x : ','.join(x))` a la columna y guardalo en la misma columna.*
"""

#INSERTA AQUÍ TU CÓDIGO
data_falcon9["PayloadMass"]

"""*Ahora exporta el dataset en formato `.csv`  con `index=False` y llámalo `dataset_part_1.csv`. Descarga el archivo porque será necesario en la siguiente práctica.*

"""

#INSERTA AQUÍ TU CÓDIGO
data_falcon9.to_csv("dataset_part_1.csv",index=False)